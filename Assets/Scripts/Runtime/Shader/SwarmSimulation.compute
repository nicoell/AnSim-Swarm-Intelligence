//Kernels with Definitions to allow different compilation per Kernel
#pragma kernel MaskedReset SETUP_ONLY
#pragma kernel SlaveUpdate SLAVE_SIM SLAVE_OR_MASTER
#pragma kernel MasterUpdate MASTER_SIM SLAVE_OR_MASTER

// Macro for HLSL Tools only for Visual Studio
// Prevents graying out unknown preprocessor macros
#if defined(__INTELLISENSE__)
  #define SETUP_ONLY
  #define SLAVE_SIM 
  #define MASTER_SIM
  #define SLAVE_OR_MASTER
#endif

#define SWARM_SIZE 64

#include "Definitions/Structs.hlsl"
#include "Utils/Random.hlsl"
#include "Definitions/SharedInputs.hlsl"
#include "Definitions/SimulationInputs.hlsl"

// Forward declaration of functions, put them at end of file
uint GetGSLocalBestIndex();
float IsPositiveAsFloat(float x);
float IsZeroOrNegativeAsFloat(float x);
bool IsPositive(float x);
float NormDist_0_1(float u1, float u2);
float3x3 GetRotationMatrixFromDirection(float3 normalizedDir);
int3 calcGridPos(float3 p);
uint calcGridAddress(int3 gridPos);

StructuredBuffer<uint> SwarmIndexBuffer;
RWStructuredBuffer<SwarmData> SwarmBuffer;
RWStructuredBuffer<SwarmParticleData> SwarmParticleBuffer;

Texture3D<float4> DistanceGradientFieldTexture;
SamplerState samplerDistanceGradientFieldTexture;

RWStructuredBuffer<ParticleHashData> TempParticleHashBuffer;
StructuredBuffer<ParticleHashData> ParticleHashBuffer;
StructuredBuffer<uint> CellStartBuffer;

float3 GridSize;
float3 CellSize;
float3 WorldOrigin;
int SwarmOffset;

float ParticleSightRadius;
float SeparationWeight;

float4x4 OrthoProjMatrix;
int VolumeResolution;

// Shared Memory
groupshared float4 gsLocalBestAndFitness[SWARM_SIZE];

#ifdef SLAVE_OR_MASTER
RWStructuredBuffer<uint> RWSwarmIndexBuffer;
RWStructuredBuffer<uint> SwarmCounterBuffer;

groupshared uint gsIndexToGlobalBest;
groupshared uint gsParticlesAlive;

float4 explosionPosRadius;

#ifdef MASTER_SIM
groupshared float4 gsSlaveGlobalBestAndFitness;
int numberOfSwarmsToRevive;
#endif

void Simulate(uint swarmBufferIndex, uint particleBufferIndex, uint groupIndex)
{
  // Read Swarm and Particle Data from Buffers
  SwarmData swarm = SwarmBuffer[swarmBufferIndex];
  SwarmParticleData originalParticle = SwarmParticleBuffer[particleBufferIndex];

  /* -----------------------------------------------------------------------
   * Particle Health Update
   * -----------------------------------------------------------------------
   *  - TODO: Collision handling etc.
   */
  
  float distanceToExplosion = length(originalParticle.position - explosionPosRadius.xyz);
  if (distanceToExplosion < explosionPosRadius.w)
  {
    originalParticle.health -= 0.5 + (explosionPosRadius.w - distanceToExplosion) / explosionPosRadius.w;
  }
  
  bool isAlive = IsPositive(originalParticle.health); // 1 when alive, 0 when dead
  float aliveMultiplicator = IsPositiveAsFloat(originalParticle.health); // 1 when alive, 0 when dead
  float deadMultiplicator = IsZeroOrNegativeAsFloat(originalParticle.health); // 0 when alive, 1 when dead
  
  /* -----------------------------------------------------------------------
   * Classic PSO Algorithm
   * -----------------------------------------------------------------------
   */
  // Copy of input particle to be simulated with classic PSO algorithm
  SwarmParticleData classicParticle = originalParticle;
  // Get random values.
  float3 rand = hash32(float2(particleBufferIndex, timeSinceStart));
  
  /* -----------------------------------------------------------------------
   * Particle Velocity Update
   * -----------------------------------------------------------------------
   */
  // Normalize but prevent NaN
  float3 dirToLocalBest = (classicParticle.localBest - classicParticle.position);
  dirToLocalBest = any(dirToLocalBest != 0) ? normalize(dirToLocalBest) : 0;
  float3 dirToGlobalBest = (swarm.globalBest - classicParticle.position);
  dirToGlobalBest = any(dirToGlobalBest != 0) ? normalize(dirToGlobalBest) : 0;
  
#ifdef SLAVE_SIM
  classicParticle.velocity = inertiaWeight * classicParticle.velocity
    + (rand.x * c1) * dirToLocalBest //In Richtung Local Best
    + (rand.y * c2) * dirToGlobalBest; //In Richtung Global best
#endif
#ifdef MASTER_SIM
  // Velocity Update of master needs the globalBest of all swarms
  if (groupIndex == 0)
  {
    // Find best globalBest of all swarms
    float fitnessComparison = 100000000; // 3.402823466e+38F
    uint indexToBest = 0;
    //iterate slave swarms and determine globalBest 
    for (uint i = 0; i < SwarmCounterBuffer.Load(0); i++)
    {
      uint slaveSwarmBufferIndex = SwarmIndexBuffer[i];
      SwarmData slaveSwarm = SwarmBuffer[slaveSwarmBufferIndex];
      
      //Check if swarm is alive and compare fitness
      if (IsPositive(slaveSwarm.particlesAlive) && slaveSwarm.fitness < fitnessComparison)
      {
        indexToBest = slaveSwarmBufferIndex;
        fitnessComparison = slaveSwarm.fitness;
      }
    }
    
    //Write global Best in sharedmemory
    gsSlaveGlobalBestAndFitness.xyz = SwarmBuffer[indexToBest].globalBest;
    gsSlaveGlobalBestAndFitness.w = SwarmBuffer[indexToBest].fitness;
  }
  GroupMemoryBarrierWithGroupSync();
  
  // Normalize but prevent NaN
  float3 dirToSlaveGlobalBest = (gsSlaveGlobalBestAndFitness.xyz - classicParticle.position);
  dirToSlaveGlobalBest = any(dirToSlaveGlobalBest != 0) ? normalize(dirToSlaveGlobalBest) : 0;
  
  classicParticle.velocity = inertiaWeight * classicParticle.velocity
    + (rand.x * c1) * dirToLocalBest
    + (rand.y * c2) * dirToGlobalBest
    + (rand.z * c3) * dirToSlaveGlobalBest;
#endif
  
  // Handle Particles that are dead by multiplying their velocity with zero
  classicParticle.velocity *= aliveMultiplicator;
  
  /* -----------------------------------------------------------------------
   * Particle Separation
   * -----------------------------------------------------------------------
   */
  int3 gridPos = calcGridPos(classicParticle.position);
  uint gridAddress = calcGridAddress(gridPos);
  uint cellStartIndex = CellStartBuffer[gridAddress];
  
  float3 sep = float3(0, 0, 0);
  // get candidate list
  for (int i = cellStartIndex; i <= cellStartIndex + 128; i++)
  {
    ParticleHashData nParticle = ParticleHashBuffer[i]; // current neighbour particle
    if (nParticle.cellId != gridAddress)
      break;
    float3 dist = classicParticle.position - nParticle.particlePos;
    if (length(dist) > ParticleSightRadius)
      continue;
    sep -= dist;
  }
  
  //Update position with separation data
  classicParticle.velocity += SeparationWeight * sep;
  
  /* -----------------------------------------------------------------------
   * Particle Position Update and Boundary Correction
   * -----------------------------------------------------------------------
   *  - TODO: Maybe find a more non-thread-divergent solution
   */
  
  // Update position
  classicParticle.position += timeScale * classicParticle.velocity;

  // Apply boundary corrections
  if (any(classicParticle.position < worldmin))
  {
    classicParticle.velocity = -classicParticle.velocity * rand.x;
    classicParticle.position = max(classicParticle.position, worldmin) + rand * alpha;
  }
  if (any(classicParticle.position > worldmax))
  {
    classicParticle.velocity = -classicParticle.velocity * rand.x;
    classicParticle.position = min(classicParticle.position, worldmax) - rand * alpha;
  }
  
  /* -----------------------------------------------------------------------
   * World Collision Detection and Reaction
   * -----------------------------------------------------------------------
   */
  float3 projectedParticlePos = mul(OrthoProjMatrix, float4(classicParticle.position, 1)).xyz;
  projectedParticlePos.xy = (projectedParticlePos.yx * 0.5f + 0.5f);
  float4 gradientDepthToWorld = DistanceGradientFieldTexture.SampleLevel(samplerDistanceGradientFieldTexture, projectedParticlePos, 0);
  
  float distanceToWorld = gradientDepthToWorld.w * (worldmax.x - worldmin.x) / 2.0;
  
  float collisionMalus = 0.0;
  // inside object > 0; on surface == 0; outside object < 0
  if (distanceToWorld > 0)
  {
    classicParticle.velocity = reflect(classicParticle.velocity, -gradientDepthToWorld.xyz);
    classicParticle.position = classicParticle.position - distanceToWorld * gradientDepthToWorld.xyz - sign(gradientDepthToWorld.xyz) * rand * alpha;
    collisionMalus = distanceToWorld + worldDodgeBias;
    distanceToWorld = 0.0;
  }
    
  float dodgeFactor = 1.0 - saturate(-distanceToWorld / worldDodgeBias); //subtract biasedDistanceToWorld which is < 1.0 if environment is within its "viewing range"
  dodgeFactor *= max(dot(classicParticle.velocity, gradientDepthToWorld.xyz), 0.0); //if particle moves in direction of world obstacle, we need to dodge, also if it is fast

  float3 dodgeDirection = dodgeFactor * cross(normalize(target - classicParticle.position), -gradientDepthToWorld.xyz);

  //classicParticle.velocity += dodgeDirection2;
  //classicParticle.position += timeScale * dodgeDirection2;
  
  float speed = length(classicParticle.velocity);
  float3 velocityChange = classicParticle.velocity - normalize(classicParticle.velocity + dodgeDirection) * speed;
  classicParticle.velocity += velocityChange;
  classicParticle.position += timeScale * velocityChange;
  
  
  /* -----------------------------------------------------------------------
   * Particle Fitness and LocalBest Update
   * -----------------------------------------------------------------------
   *  - Fitness is evaluated in terms of distance to target.
   */
  
  // If particle is dead add big handicap to fitness, so it doesn't get chosen a best.
  float3 direction = classicParticle.position - target;
  float currentFitness = length(direction) + collisionMalus + deadMultiplicator * 1000000;
  
  // Save localBest and fitness, if it's a new optimal local solution
  classicParticle.localBest = (currentFitness < classicParticle.fitness) ? classicParticle.position : classicParticle.localBest;
  classicParticle.fitness = min(classicParticle.fitness, currentFitness);
  
  /* -----------------------------------------------------------------------
   * Swarm Fitness, GlobalBest and ParticlesAlive Update
   * -----------------------------------------------------------------------
   *   - Utilizes GroupShared Memory to find the best solution for this swarm
   */
  
  gsLocalBestAndFitness[groupIndex] = float4(classicParticle.localBest, classicParticle.fitness);
  gsParticlesAlive = 0; //Init ParticlesAlive to 0 (RaceCondition warning, but no problem)
  
  GroupMemoryBarrierWithGroupSync();

  InterlockedAdd(gsParticlesAlive, uint(isAlive)); //Count Alive Particles
  
  if (groupIndex == 0)
  {
    uint indexToBest = GetGSLocalBestIndex();
    // Only save index to SharedMemory global Best so everyone can use it.
    // Writing results back to swarm Struct is only visible for groupIndex = 0
    gsIndexToGlobalBest = indexToBest;
    //swarm.globalBest = gsLocalBestAndFitness[indexToBest].xyz;
    //swarm.fitness = gsLocalBestAndFitness[indexToBest].w;
  }
  GroupMemoryBarrierWithGroupSync();
    
  /* -----------------------------------------------------------------------
   * Evolutionary Part 
   * -----------------------------------------------------------------------
   *   - Replicates original particle N times and mutates each replica to find
   *     a better local best for original particle
   *   - Uses the in this iteration already updated swarms global best and particles local best
   */
  SwarmParticleData bestParticle = classicParticle;
  if (isAlive)// Only create replicas if current particle isnt dead
  {
    //Replicate current particle N times and select its best replica
    for (uint i = 0; i < n; i++)
    {
      SwarmParticleData replica = originalParticle;
      //create random variables [0,1] for all mutations and velocity equations
      float4 rand_mc = hash43(float3(particleBufferIndex, timeSinceStart, i + 0.6f));
      float2 rand_mw = hash22(float2(rand_mc.x, timeSinceStart));
      float2 rand_mbg = hash23(float3(rand_mc.yz, i + 1.22f));
      float3 rand_mutation = hash33(float3(rand_mbg, i + 23.2f));
        
      //calculate mutations
      float mw = min(inertiaWeight + (sigma * NormDist_0_1(rand_mw.x, rand_mw.y)), 1.0); // Equation 7
      float mc1 = c1 + (sigma * NormDist_0_1(rand_mc.x, rand_mc.y)); // Equation 8
      float mc2 = c2 + (sigma * NormDist_0_1(rand_mc.z, rand_mc.w)); // Equation 9
      float3 mbg = gsLocalBestAndFitness[gsIndexToGlobalBest].xyz + (sigma_g * NormDist_0_1(rand_mbg.x, rand_mbg.y));; // Equation 10. mutation global best
        
      // Normalize but prevent NaN
      float3 dirToLocalBest = (replica.localBest - replica.position);
      dirToLocalBest = any(dirToLocalBest != 0) ? normalize(dirToLocalBest) : 0;
      float3 dirToGlobalBest = (mbg - replica.position);
      dirToGlobalBest = any(dirToGlobalBest != 0) ? normalize(dirToGlobalBest) : 0;
#ifdef SLAVE_SIM
            //update velocity slave swarm. Equation 11
      replica.velocity = mw * replica.velocity 
            + (rand_mutation.x * mc1) * dirToLocalBest
            + (rand_mutation.y * mc2) * dirToGlobalBest;
#endif        
#ifdef MASTER_SIM
      float2 rand_mc3 = hash22(float2(particleBufferIndex, rand_mc.w));
      float mc3 = c3 + (1 + sigma * NormDist_0_1(rand_mc3.x, rand_mc3.y));; // Equation 14
        
      // Normalize but prevent NaN
      float3 dirToSlaveGlobalBest = (gsSlaveGlobalBestAndFitness.xyz - replica.position);
      dirToSlaveGlobalBest = any(dirToSlaveGlobalBest != 0) ? normalize(dirToSlaveGlobalBest) : 0;
      
      // Update velocity master swarm. Equation 12
      replica.velocity = mw * replica.velocity 
            + (rand_mutation.x * mc1) * dirToLocalBest
            + (rand_mutation.y * mc2) * dirToGlobalBest
            + (rand_mutation.z * mc3) * dirToSlaveGlobalBest;
#endif            
      
      /* -----------------------------------------------------------------------
       * Particle Separation
       * -----------------------------------------------------------------------
       */
      int3 gridPos = calcGridPos(replica.position);
      uint gridAddress = calcGridAddress(gridPos);
      uint cellStartIndex = CellStartBuffer[gridAddress];
  
      float3 sep = float3(0, 0, 0);
      // get candidate list
      for (int i = cellStartIndex; i <= cellStartIndex + 128; i++)
      {
        ParticleHashData nParticle = ParticleHashBuffer[i]; // current neighbour particle
        if (nParticle.cellId != gridAddress)
          break;
        float3 dist = replica.position - nParticle.particlePos;
        if (length(dist) > ParticleSightRadius)
          continue;
        sep -= dist;
      }
  
      //Update velocity with separation data
      replica.velocity += SeparationWeight * sep;
      
      // Update position. Equation 2
      replica.position += timeScale * replica.velocity;
        
      // Apply boundary corrections. Equation 4 & 5
      if (any(replica.position < worldmin))
      {
        replica.velocity = -replica.velocity * rand_mutation.x;
        replica.position = max(replica.position, worldmin) + rand_mutation * alpha;
      }
      if (any(replica.position > worldmax))
      {
        replica.velocity = -replica.velocity * rand_mutation.x;
        replica.position = min(replica.position, worldmax) - rand_mutation * alpha;
      }
      
      /* -----------------------------------------------------------------------
       * World Collision Detection and Reaction
       * -----------------------------------------------------------------------
       */
      float3 projectedParticlePos = mul(OrthoProjMatrix, float4(replica.position, 1)).xyz;
      projectedParticlePos.xy = (projectedParticlePos.yx * 0.5f + 0.5f);
      float4 gradientDepthToWorld = DistanceGradientFieldTexture.SampleLevel(samplerDistanceGradientFieldTexture, projectedParticlePos, 0);
  
      float distanceToWorld = gradientDepthToWorld.w * (worldmax.x - worldmin.x) / 2.0;
  
      float collisionMalus2 = 0.0;
      // inside object > 0; on surface == 0; outside object < 0
      if (distanceToWorld > 0)
      {
        replica.velocity = reflect(replica.velocity, -gradientDepthToWorld.xyz);
        replica.position = replica.position - distanceToWorld * gradientDepthToWorld.xyz - sign(gradientDepthToWorld.xyz) * rand_mutation * alpha;
        collisionMalus2 = distanceToWorld + worldDodgeBias;
        distanceToWorld = 0.0;
      }
      
      float dodgeFactor = 1.0 - saturate(-distanceToWorld / worldDodgeBias); //subtract biasedDistanceToWorld which is < 1.0 if environment is within its "viewing range"
      dodgeFactor *= max(dot(replica.velocity, gradientDepthToWorld.xyz), 0.0); //if particle moves in direction of world obstacle, we need to dodge, also if it is fast

      float3 dodgeDirection2 = dodgeFactor * cross(normalize(target - replica.position), -gradientDepthToWorld.xyz);

      //replica.velocity += dodgeDirection2;
      //replica.position += timeScale * dodgeDirection2;
      
      float speed = length(replica.velocity);
      float3 velocityChange = replica.velocity - normalize(replica.velocity + dodgeDirection2) * speed;
      replica.velocity += velocityChange;
      replica.position += timeScale * velocityChange;
  
      // Update fitness
      // Fitness is evaluated in terms of quadratic distance to target.
      float currentFitness = length(replica.position - target) + collisionMalus2;
  
      // Save localBest and fitness, if it's a new optimal local solution
      replica.localBest = (currentFitness < replica.fitness) ? replica.position : replica.localBest;
      replica.fitness = min(replica.fitness, currentFitness);
            
      //If we have a new best replica we save it
      if (replica.fitness < bestParticle.fitness)
      {
        bestParticle = replica;
      }
    }
    // Update original particles local best with the best replica
    //particle.localBest = (bestParticle.fitness < particle.fitness) ? bestParticle.localBest : particle.localBest;
    //particle.fitness = min(particle.fitness, bestParticle.fitness);
    
  
    gsLocalBestAndFitness[groupIndex] = float4(bestParticle.localBest, bestParticle.fitness);
  }
  
  GroupMemoryBarrierWithGroupSync(); //AllMemoryBarrierWithGroupSync();
  /* -----------------------------------------------------------------------
   * Execute 1.Pass of UniformGrid Construction Algorithm (CalcHash-Funktion)
   * -----------------------------------------------------------------------
   * 
   */
  // get address in grid
  int3 gridPosNew = calcGridPos(bestParticle.position);
  uint gridAddressNew = calcGridAddress(gridPosNew);

  ParticleHashData gridData;
  gridData.cellId = gridAddressNew;
  gridData.particlePos = bestParticle.position;
  // store grid hash and particle index
  TempParticleHashBuffer[SwarmOffset + particleBufferIndex] = gridData;
  
  /* -----------------------------------------------------------------------
   * Update/Init RotationMatrix
   * -----------------------------------------------------------------------
   */
  bestParticle.rotationMatrix = GetRotationMatrixFromDirection(normalize(bestParticle.velocity));
  
  /* -----------------------------------------------------------------------
   * Write results back to buffer
   * -----------------------------------------------------------------------
   * 
   */
  
  if (groupIndex == 0)//update global best of swarm
  {
    uint indexToBest = GetGSLocalBestIndex();
    swarm.globalBest = gsLocalBestAndFitness[indexToBest].xyz;
    swarm.fitness = gsLocalBestAndFitness[indexToBest].w;
  }
  
  //GroupMemoryBarrierWithGroupSync();
  
  SwarmParticleBuffer[particleBufferIndex] = bestParticle; // Update ParticleData
  
  if (groupIndex == 0) //Only groupIndex 0 writes SwarmData back to buffer
  {
    swarm.particlesAlive = gsParticlesAlive;
    SwarmBuffer[swarmBufferIndex] = swarm; // Update SwarmData
    
#ifdef SLAVE_SIM
    /* ---------------------------------------------------------------------
     * Update IndexBuffer and InvocationCount of next frames dispatch
     * ---------------------------------------------------------------------
     *  - This basically removes dead SlaveSwarms from being processed.
     */
    
    //If any particles are alive, increment counter to rebuild indexBuffer
    if (swarm.particlesAlive > 0)
    {
      // The counterBuffers value is used as the number of threadGroupsX next simulation step.
      uint index = SwarmCounterBuffer.IncrementCounter(); //Increments counter, index holds the pre-incremented counter value.
      RWSwarmIndexBuffer[index] = swarmBufferIndex; // Update Index
    }
#endif
    
#ifdef MASTER_SIM
    /* ---------------------------------------------------------------------
     * SlaveSwarm Reactivation
     * ---------------------------------------------------------------------
     *  - This basically re-adds SlaveSwarms to being processsed.
     *  - Remark: MasterSwarm Simulation is always run after Slave Simulation, so the InvocationCount representing all living swarms for next frame is available in SwarmCounterBuffer. We can now add more swarms, say reactivate them, by increasing this InvocationCount but respecting the max number of slave swarms allowed.
     *  - Remark: MasterSwarm Simulation may be followed by a MaskedReset call which is able to heal all active swarms. By increasing the InvocationCount here and afterwards healing all active swarms, we "revive" SlaveSwarms. MasterSwarm is always processed, even if all its particles are dead.
     *  - Remark: swarmBufferMasterIndex is equal to maxSlaveSwarmCount
     *            The numberOfSwarmsToRevive is determined on CPU as part of the "AI" behaviour
     *  - Warning: This is quite heavy code for GPU, but it's only done once per Swarm and frame, so we take it.
     */

    int swarmsLeftToRevive = numberOfSwarmsToRevive;
    // Iterate all SlaveSwarms and reactive them. Reactive as much as possible, stop if we iterated all swarms or if we revived enough.
    for (uint k = 0; k < swarmBufferMasterIndex; k++)
    {
      if (swarmsLeftToRevive > 0 && SwarmBuffer[k].particlesAlive == 0)
      {
        uint index = SwarmCounterBuffer.IncrementCounter();
        RWSwarmIndexBuffer[index] = k;
        swarmsLeftToRevive--;
      }
      SwarmBuffer[k].globalBest = swarm.globalBest;
      SwarmBuffer[k].fitness = swarm.fitness;
      // Find a dead swarm
      
    }
#endif
    
  }
}
#endif

#ifdef SLAVE_SIM
[numthreads(SWARM_SIZE, 1, 1)]
void SlaveUpdate(uint3 group : SV_GroupID, uint groupIndex : SV_GroupIndex, uint3 id : SV_DispatchThreadID)
{
  uint swarmBufferIndex = SwarmIndexBuffer[group.x];
  uint particleBufferIndex = swarmBufferIndex * SWARM_SIZE + groupIndex;
  Simulate(swarmBufferIndex, particleBufferIndex, groupIndex);
}
#endif

#ifdef MASTER_SIM
[numthreads(SWARM_SIZE, 1, 1)]
void MasterUpdate(uint3 group : SV_GroupID, uint groupIndex : SV_GroupIndex, uint3 id : SV_DispatchThreadID)
{

  uint swarmBufferIndex = SwarmIndexBuffer[swarmBufferMasterIndex];
  uint particleBufferIndex = swarmBufferIndex * SWARM_SIZE + groupIndex;
  Simulate(swarmBufferIndex, particleBufferIndex, groupIndex);
}
#endif

#ifdef SETUP_ONLY
[numthreads(SWARM_SIZE, 1, 1)]
void MaskedReset(uint3 group : SV_GroupID, uint groupIndex : SV_GroupIndex, uint3 id : SV_DispatchThreadID)
{
  uint swarmBufferIndex = SwarmIndexBuffer[group.x];
  uint particleBufferIndex = swarmBufferIndex * SWARM_SIZE + groupIndex;
  
  SwarmParticleData particle = SwarmParticleBuffer[particleBufferIndex];
  float3 rand = hash32(float2(particleBufferIndex, timeSinceStart));
  
  /* -----------------------------------------------------------------------
   * Conditional Update of particle data
   * -----------------------------------------------------------------------
   */
  bool particleWasRevived = false;
  if (reviveParticles)
  {
    // If particle was dead, set bool that is was revived
    particleWasRevived = (SwarmParticleBuffer[particleBufferIndex].health <= 0.0);
    particle.health = reviveHealthAmount;
  }
  
  if (enablePositionReset && ((resetOnlyIfRevived && particleWasRevived) || !resetOnlyIfRevived))
  {
    //Reset position if position reset is enabled AND particle was either revived or should be reset regardless
    particle.position = resetPosition.xyz + rand * velocityVariance;
  }
  
  if (enableVelocityReset && ((resetOnlyIfRevived && particleWasRevived) || !resetOnlyIfRevived))
  {
    //Reset velocity if velocity reset is enabled AND particle was either revived or should be reset regardless
    particle.velocity = rand * velocityVariance;
  }
  
  float aliveMultiplicator = IsPositiveAsFloat(particle.health); // 1 when alive, 0 when dead
  float deadMultiplicator = IsZeroOrNegativeAsFloat(particle.health); // 0 when alive, 1 when dead

  /* -----------------------------------------------------------------------
   * Update/Init RotationMatrix
   * -----------------------------------------------------------------------
   */
  particle.rotationMatrix = GetRotationMatrixFromDirection(normalize(particle.velocity));
  
  /* -----------------------------------------------------------------------
   * Update/Init particle fitness
   * -----------------------------------------------------------------------
   */
  float3 direction = particle.position - target;
  float currentFitness = length(direction) + deadMultiplicator * 1000000;
  particle.localBest = particle.position;
  particle.fitness = currentFitness;

  /* -----------------------------------------------------------------------
   * Swarm Fitness, GlobalBest and ParticlesAlive Update
   * -----------------------------------------------------------------------
   */
  gsLocalBestAndFitness[groupIndex] = float4(particle.localBest, particle.fitness);
  
  GroupMemoryBarrierWithGroupSync();

  if (groupIndex == 0)
  {
    SwarmData swarm = SwarmBuffer[swarmBufferIndex];
    
    uint indexToBest = GetGSLocalBestIndex();
    swarm.globalBest = gsLocalBestAndFitness[indexToBest].xyz;
    swarm.fitness = gsLocalBestAndFitness[indexToBest].w;
    
    // Update particles alive
    if (reviveParticles && reviveHealthAmount > 0)
      swarm.particlesAlive = SWARM_SIZE;
    
    SwarmBuffer[swarmBufferIndex] = swarm; // Write result
  }
  
  /* -----------------------------------------------------------------------
   * Write particleData back to buffer
   * -----------------------------------------------------------------------
   */
  SwarmParticleBuffer[particleBufferIndex] = particle;
}
#endif


/* -----------------------------------------------------------------------
 * Function declarations
 * -----------------------------------------------------------------------
 */
inline uint GetGSLocalBestIndex()
{
  uint indexToBest = 0;
  float fitnessComparison = 100000000; // 3.402823466e+38F
  for (uint i = 0; i < SWARM_SIZE; i++)
  {
    if (gsLocalBestAndFitness[i].w < fitnessComparison)
    {
      indexToBest = i;
      fitnessComparison = gsLocalBestAndFitness[i].w;
    }
  }
  return indexToBest;
}

inline float IsPositiveAsFloat(float x)
{
  return (float) (x > 0);
}
inline float IsZeroOrNegativeAsFloat(float x)
{
  return (float) (x <= 0);
}
inline bool IsPositive(float x)
{
  return (x > 0);
}

//Returns a random normal distributed (mean 0, stdev 1) variable via Box-Muller-Transformation
//u1 and u2 should be uniform(0,1] random
inline float NormDist_0_1(float u1, float u2)
{
  return sqrt(-2.0 * log(u1)) * sin(2.0 * 3.14159265f * u2);
}

// calculate position in uniform grid
inline int3 calcGridPos(float3 p)
{
  int3 gridPos;
  gridPos.x = floor((p.x - WorldOrigin.x) / CellSize.x);
  gridPos.y = floor((p.y - WorldOrigin.y) / CellSize.y);
  gridPos.z = floor((p.z - WorldOrigin.z) / CellSize.z);
  return gridPos;
}

// calculate address in grid from position (clamping to edges)
inline uint calcGridAddress(int3 gridPos)
{
  gridPos.x = max(0, min(gridPos.x, GridSize.x - 1));
  gridPos.y = max(0, min(gridPos.y, GridSize.y - 1));
  gridPos.z = max(0, min(gridPos.z, GridSize.z - 1));
  return (uint) (((gridPos.z * GridSize.y) * GridSize.x) + (gridPos.y * GridSize.x) + gridPos.x);
}

inline float3x3 GetRotationMatrixFromDirection(float3 normalizedDir)
{
  const float3 up = normalize(float3(0, 1, 0));
  float3 temp = normalize(cross(up, normalizedDir));
  float3x3 ret =
  {
    temp,
    -normalizedDir,
    cross(normalizedDir, temp),
  };
  return transpose(ret);
}